@page "/contact"
@inject HttpClient Http

<div id="contact">
    @if (property is null)
    {
        <div style="display: flex; justify-content: center; gap: 2.5rem;">
            <p><em>Loading...</em></p>
        </div>
    }
    else if (icons is not null)
    {
        <div class="centered-container" style="background-color: @PrimaryColor;">
            <div style="display: flex; justify-content: center; gap: 1rem;">
                @if (string.IsNullOrWhiteSpace(property.Email) is false)
                {
                    <a href="mailto:@(property.Email)">
                        <img src="@icons.Email" alt="email" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.DevDotTo) is false)
                {
                    <a href="https://dev.to/@(property.DevDotTo)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.DevDotTo" alt="Dev.to" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.GitHub) is false)
                {
                    <a href="https://github.com/@(property.GitHub)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.GitHub" alt="GitHub" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.Instagram) is false)
                {
                    <a href="https://instagram.com/@(property.Instagram)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.Instagram" alt="Instagram" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.LinkedIn) is false)
                {
                    <a href="https://linkedin.com/in/@(property.LinkedIn)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.LinkedIn" alt="LinkedIn" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.Medium) is false)
                {
                    <a href="https://medium.com/@@@(property.Medium)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.Medium" alt="Medium" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.Twitter) is false)
                {
                    <a href="https://twitter.com/@(property.Twitter)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.Twitter" alt="Twitter" class="social-icon" />
                    </a>
                }
                @if (string.IsNullOrWhiteSpace(property.YouTube) is false)
                {
                    <a href="https://youtube.com/@(property.YouTube)" target="_blank" rel="noopener noreferrer">
                        <img src="@icons.YouTube" alt="YouTube" class="social-icon" />
                    </a>
                }
            </div>

        </div>
    }
</div>

@code {
    [Parameter]
    public string PrimaryColor { get; set; } = "#4E567E";

    [Parameter]
    public string SecondaryColor { get; set; } = "#D2F1E4";

    private SiteProperties? property;

    private SocialIcons? icons;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            property = await Http.GetFromJsonAsync<SiteProperties>("sample-data/siteproperties.json");
            icons = await Http.GetFromJsonAsync<SocialIcons>("sample-data/socialicons.json");
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP request related exceptions
            // Log the exception, show an error message, etc.
        }
        catch (Exception ex)
        {
            // Handle any other exceptions that might occur
            // Log the exception, show an error message, etc.
        }

    }
}